!! Reddit.st -- in 10 Cool Pharo Classes


CRUD is an acronym for the Create, Read, Update and Delete operations in a persistent storage system, with the term "CRUD application" normally associated with a quick application that can manage simple data. CRUD development is often linked to scripting languages like PHP, however in this booklet we will show that Pharo is also a great choice, with the added advantage that it allows your CRUD application to organically evolve (something that is often problematic when using more traditional programming languages). We will demonstrate that you you can write nice looking web applications extremely quickly in Pharo and this sample, Reddit.st, also adds persistency in a relational database, unit testing, as well as web application components to the mix.

Technically speaking, we will show how to implement a small but non-trivial web application in Pharo *http://www.pharo.org* using Seaside *http://seaside.st*, Glorp *http://glorp.org* (an ORM) and PostgreSQL *http://www.postgresql.org*.
The appendix also explains how to get the source code discussed in this article.


To give some context to our journey, we will base our example on Reddit, *http://www.reddit.com*, a web application where users can post interesting links that get voted up or down as an example domain. The idea is that the 'best' links end up with the most points automatically. There are other websites like Delicious, Digg and Hacker News that also exist in this area of social bookmarking, so it's an interesting domain to explore.


The 10 main sections of this booklet follow the development of the 10 classes making up the application. The focus of the Pharo version is less about the small size of the application or the high developer productivity, but more on the fact that we can cover so much ground using powerful frameworks, as well as the natural development flow from model to tests and persistence to web GUI.


Finally, before jumping in, the material included in this booklet was originally written by Sven Van Caekenberghe and published at: *https://medium.com/@svenvc/reddit-st-in-10-cool-pharo-classes-1b5327ca0740*. We thank him for his permission to use this work, and to create this booklet.  We assume that you understand what web applications are and the basics of how Seaside  works. If not, you should read the Seaside Chapter available in Pharo by Example or the introduction to Dynamic Web Development with Seaside available at *http://books.pharo.org*. We further assume that you have a basic understanding of relational databases and/or SQL.


!! First RedditLink: a Model

The central object of our application is ==RedditLink==, representing an interesting URL with a title, a created timestamp and a number of bullet points. It has the following properties: ==id url title created points==.

These are naturally instance variables of a new class, which we create by subclassing ==Object== and editing a class template in a browser like this:

[[[
Object subclass: #RedditLink 
   instanceVariableNames: 'id url title created points' 
   classVariableNames: '' 
   package: 'Reddit'
]]]

Next, use the class refactoring tool to automatically generate accessors (getters and setters) for all these instance variables. With these implemented we can then write ==initialize== and ==printOn:== methods.


!!!! Initialization and more
[[[
RedditLink >> initialize
	self 
		points: 0;
		created: DateAndTime now
]]]

[[[
RedditLink >> printOn: stream
    super printOn: stream. 
    stream nextPut: $(. 
    self url printOn: stream. 
    stream nextPut: $,.
    self title printOn: stream. 
    stream nextPut: $)
]]]

We can also add a method named ==age== that will return the ==Duration== of time the link has existed. We will use this when rendering links later on. Notice how easily Pharo (and Smalltalk) deals with time arithmatic.

[[[
RedditLink >> age
    ^ DateAndTime now - self created
]]]

To make it a little bit easier for others to create new instances of our object, we also add a class method called withUrl:title:.

[[[
RedditLink class >> withUrl: url title: title
  ^ self new 
      url: url;
      title: title;
      yourself
]]]

At this point you should be able to quickly test everything by typing the following into a playground and opening an inspector window on an instance of the resulting object as shown in Figure *@redditModel1*.

[[[
(RedditLink withUrl: 'http://pharo.org' title: 'pharo') inspect
]]]


+RedditLink defined.>file://figures/redditModel1.png|width=110|label=redditModel1+


!!!! Example support
To allow us to conveniently run our application over and over, we can also add an example class method and annotate it with the pragma ==<sampleInstance>==. This adds a green arrow to our browser, which when pressed will handily open an inspector on our new object.

[[[
RedditLink class >> pharoDotOrg
	<sampleInstance>
	^ self withUrl: 'http://pharo.org' title: 'pharo'
]]]



!!!! Voting support

Apart from creating and displaying RedditLinks, users should also be able to vote them up and down. To do this, we add two action methods, ==voteUp== and ==voteDown==.

[[[
RedditLink >> voteUp
    self points: self points + 1

RedditLink >> voteDown
    self points > 0 ifTrue: [ self points: self points - 1 ]
]]]

The core of ==RedditLink== objects is now finished. Everything is ready to make instances and use them.



!! RedditLinkTests

Units tests are very important, less so in small examples like this one, but definitely in larger applications. Having a good set of unit tests with decent coverage helps protect the code during changes. At the same time, unit tests function as working documentation. Instead of writing scratch test code in a workspace, you might just as well write a unit test, particularly when Pharo makes this very easy. 


!!!! TestCase creation
We first create the class ==RedditLinkTests== as a subclass of ==TestCase== and add 3 test methods.

[[[
TestCase subclass: #RedditLinkTests
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Reddit'
]]]

When creating a ==RedditLink== object, and/or manipulating it, we want to easily assert that certain conditions hold for its internal state. To help with code sharing (we'll use it again in Section 5) we add a helper class method called ==assertContractUsing:== to ==RedditLinkTests== that checks the basic contract of a RedditLink, using the method ==assert:== on an arbitrary object. 


[[[
RedditLinkTests class >> assertContractUsing: aRedditLink
   self assert: (aRedditLink url isNil or: [ aRedditLink url isString ]).
   self assert: (aRedditLink title isNil or: [ aRedditLink title isString ]).
   self assert: (aRedditLink created isKindOf: DateAndTime).
   self assert: (aRedditLink points isKindOf: Integer).
   self assert: aRedditLink age asSeconds >= 0.
]]]


!!!! Tests
Now we can take advantage of these methods in our tests.

[[[
RedditLinkTests >> testInitialState
	| link |
	link := RedditLink new.
	self class assertContractUsing: self.
	self assert: link points isZero
]]]

[[[
RedditLinkTests >> testCreate
	| link url title |
	url := 'http://www.seaside.st'.
	title := 'Seaside'.
	link := RedditLink withUrl: url title: title.
	self class assertContractUsing: link.
	self assert: link points isZero.
	self assert: link url equals: url.
	self assert: link title equals: title
]]]



[[[
RedditLinkTests >> testVoting
	| link |
	link := RedditLink new.
	self class assertContractUsing: link.
	self assert: link points isZero.
	link voteUp.
	self assert: link points equals: 1.
	link voteDown.
	self assert: link points isZero.
	link voteDown.
	self assert: link points isZero
]]]

Pharo has integrated tools to quickly run these tests. There is a separate Test Runner, but you can also run tests directly from a Browser as well. The browser even has a permanent indication for successful and failed tests.

+First green tests.>file://figures/redditLinkTest.png|width=110|label=redditModel1+

@@note A small remark. It is often better to write tests before even writing the code for a class. 
By adopting this approach you are more confident that what you write is fulfilling your specifications. This is commonly called Test Driven Development (TDD)


!! Intermezzo

!!! Installing Postgres

!!!! On Mac OSX

Download Postgres.app from the web site of *https://www.postgresql.org/download/*, and follow the steps mentioned on that page.

- Download: Move Postgres.app to the Applications folder and Double Click on it. If you don't first move the app to the Applications folder, you will get a warning about an unidentified developer and won't be able to open it.
- Click "Initialize" to create a new server
- Configure your $PATH to use the included command line tools (optional):

[[[
sudo mkdir -p /etc/paths.d &&
echo /Applications/Postgres.app/Contents/Versions/latest/bin 
| sudo tee /etc/paths.d/postgresapp
]]]

Done! You now have a PostgreSQL server running on your Mac with these default settings:

[[[
Host: localhost
Port: 5432
User: your system user name
Database: same as user
Password none
Connection URL postgresql://localhost
]]]

On the command line you can type 
[[[
/Applications/Postgres.app/Contents/Versions/9.6/bin/psql -p5432
]]]

@@note If you are handy with the command line, you can also use the package manager Homebrew on the site *https://brew.sh/*, and execute the command [[[ brew install postgresql ]]] to install Postgres.

!!! Intermezzo: Installing Glorp

To access your database from Pharo, you will also need to install some database access libraries, by evaluating the following in a workspace:

[[[
Metacello new
	smalltalkhubUser: 'DBXTalk' project: 'Garage';
	configuration: 'GarageGlorp';
	version: #stable;
	load.
]]]
   
and you also need to set Postgres as your default databse for Glorp to use by executing:
[[[
GAGlorpDriver beGlorpDefaultDriver.
]]]
 
 
!! RedditSchema: Describing database data

To make our application less trivial, we are going to make our collection of links persistent in a relation database. For this we are going to use Glorp, an object-relational mapping tool. Glorp will take care of all the SQL for us! To do its magic, Glorp needs a ==DescriptorSystem== that tells it 3 things: the class models involved, the tables involved and the way the two map (which it calls a descriptor). 


In this case we are just mapping one object into one table, so the descriptor system might look a bit verbose. However, remember that Glorp can do many more advanced things and there are even extensions that implement automatic *ActiveRecord>https://www.martinfowler.com/eaaCatalog/activeRecord.html* style descriptors.

!!!! Defining A Schema
First we define a new class description named ==RedditSchemaDescriptor== as a subclass of  ==DescriptorSystem== for Glorp to work with.

[[[
DescriptorSystem subclass: #RedditSchemaDescriptor
   instanceVariableNames: '' 
   classVariableNames: '' 
   package: 'Reddit-DB'
]]]


Using this class we can then tell Glorp about our class model, ==RedditLink==, and which instance variables are to be persistent attributes. Instead of using an XML description, a more powerful Smalltalk object model is built. Conventions in methods names are then used to glue things together.


[[[
RedditSchemaDescriptor >> constructAllClasses
    ^ super constructAllClasses add: RedditLink; yourself

RedditSchemaDescriptor >> classModelForRedditLink: aClassModel
    #(id url title created points) do: [ :each | aClassModel newAttributeNamed: each ]
]]]


!!!! Tables
The second step in our mapping is to describe which tables are involved. Here we list all the fields (columns) of our table ==REDDIT_LINKS==. Glorp shields us from the differences between different SQL dialects. Note how id is designated to be a primary key, and its type "platform serial" will result in an SQL sequence number being used. 

[[[
RedditSchemaDescriptor >> allTableNames
     ^ #( 'REDDIT_LINKS' )
]]]
 
[[[ 
RedditSchemaDescriptor >> tableForREDDIT_LINKS: aTable
     (aTable createFieldNamed: 'id' type: platform serial) bePrimaryKey. 
     aTable createFieldNamed: 'url' type: (platform varchar: 64). 
     aTable createFieldNamed: 'title' type: (platform varchar: 64). 
     aTable createFieldNamed: 'created' type: platform timestamp.
     aTable createFieldNamed: 'points' type: platform integer
]]]

The third and final step is the actual descriptor describing the mapping between the class model ==RedditLink== and the table ==REDDIT_LINKS==. In this case, direct mappings are used between attributes and fields, and we will see in the next section that Glorp is now configured to do its job.

[[[
RedditSchemaDescriptor >> descriptorForRedditLink: aDescriptor

     | table | 
     table := self tableNamed: 'REDDIT_LINKS'. 
     aDescriptor table: table. 
     (aDescriptor newMapping: DirectMapping) from: #id to: (table fieldNamed: 'id'). 
     (aDescriptor newMapping: DirectMapping) from: #url to: (table fieldNamed: 'url'). 
     (aDescriptor newMapping: DirectMapping) from: #title to: (table fieldNamed: 'title'). 
     (aDescriptor newMapping: DirectMapping) from: #created to: (table fieldNamed: 'created'). 
     (aDescriptor newMapping: DirectMapping) from: #points to: (table fieldNamed: 'points')
]]]

!! Connecting to the Database

At this point we will assume that you have correctly installed and configured PostgreSQL on a machine and that you also created an empty database.


!!!! Creation a database resource

We now have to specify how Glorp can connect to PostgreSQL, and we do this by creating a new class named ==RedditDatabaseResource==.

[[[
Object subclass: #RedditDatabaseResource
   instanceVariableNames: '' 
   classVariableNames: 'DefaultLogin' 
   package: 'Reddit-DB'
]]]

We now add some configuration class methods (as well as a class variable called ==DefaultLogin==).

[[[
RedditDatabaseResource class >> login
     DefaultLogin ifNil: [ DefaultLogin := self createLogin ]. 
     ^ DefaultLogin
]]]

[[[
RedditDatabaseResource class >> login: aLogin
     "see #createLogin for an example of how to create a Login object"      
     DefaultLogin := aLogin
]]]
 
[[[
RedditDatabaseResource class >> createLogin
     ^ Login new 
          database: PostgreSQLPlatform new; 
          username: 'svc'; 
          password: 'secret'; 
          connectString: 'localhost:5432_playground'; 
          yourself
]]]


The username and password speak for themselves, the ==connectString== contains the hostname, port number and database name (after an underscore), that you configured when installing Postgres earlier on.

!!!! Using Session 
Glorp accesses a database through sessions. A session is easily started from a descriptor system given a login as argument, and that's what we do in the ==session== helper class method.

[[[
RedditDatabaseResource >> session
     ^ RedditSchemaDescriptor sessionForLogin: self login
]]]

[[[
RedditDatabaseResource >> create
<sampleInstance>
     "This has to be done only once, be sure to set #login"
     |session | 
     session := self session. 
     session accessor 
        login; 
        logging: true. 
     session inTransactionDo: [ session createTables ]. 
     session accessor logout
]]]

Glorp can even help us to create our ==REDDIT_LINKS== table, which is what the ==createTables== class method does. So we truly don't have to use any SQL! The flow should be familiar in this create method: get a session, login, do some work in a transaction and then logout. By setting logging to true, the generated SQL statements will be printed on the Transcript (comment this out for production use). By using the <sampleInstance> pragma as we suggested earlier for the RedditLink, we can click on the green triangle and get Glorp to create the tables for us now. Try it, and then check that our table has been created in your Postgres database (hint: there should be some logging in the console).


!! Time to test: RedditDatabaseTest

With our ==RedditSchemaDescriptor== system and our ==RedditLinksDatabaseResource== we are now ready to test the persistency of our model, and so we create another class named ==RedditDatabaseTests== which inherits from ==TestCase==. These tests need an instance variable called ==session== to hold the Glorp session, as well as ==setUp== and ==teardown== methods.


[[[
TestCase subclass: #RedditDatabaseTests
   instanceVariableNames: 'session'
   classVariableNames: ''
   package: 'Reddit-DB'
]]]

[[[
RedditDatabaseTest >> setUp
     session := RedditDatabaseResource session.
     session accessor logging: true; login
]]]

[[[
RedditDatabaseTest >> tearDown
     session accessor logout
]]]


Our first test reads all RedditLinks from the database, making sure they are valid and of the expected type. Querying doesn't have to be done in a unit of work or transaction.

[[[
RedditDatabaseTest >> testQuery
    |links|
    links := session readManyOf: RedditLink.
     links do: [ :each |
                 RedditLinkTests assertContractUsing: each. 
                 self assert: (each isKindOf: RedditLink) ]
]]]


The second test creates a new ==RedditLink== and then registers it with the session inside a unit of work. This will effectively save the object in the database. The id of the ==RedditLink== will have a value afterwards. Next we reset the session and query the ==RedditLink== with the known id. After making sure that what we put in the database is what we got out, we delete the object.

[[[
RedditDatabaseTest >> testUpdate
	| link url title id |
	url := 'http://www.seaside.st'.
	title := 'Seaside Unit Test'.
	link := RedditLink withUrl: url title: title.
	session inUnitOfWorkDo: [ session register: link ].
	id := link id.
	session	inUnitOfWorkDo: [ 
	            session register: link.
	            link voteUp ].
	session reset.
	link := session readOneOf: RedditLink where: [ :each | each id = id ].
	self assert: link points equals: 1.
	session delete: link
]]]

 The third test checks if updating an existing persistent object works as expected. Note that the actual modification, the ==voteUp==, has to be done inside a unit of work to a registered object for it to be picked up by Glorp.

[[[
RedditDatabaseTest >> testCreate
     | link url title id |
     url := 'http://www.seaside.st'.
     title := 'Seaside Unit Test'.
     link := RedditLink withUrl: url title: title.
     session inUnitOfWorkDo: [ session register: link ].
     id := link id.
     self assert: id notNil.
     session reset.
     link := session readOneOf: RedditLink where: [ :each | each id = id ].
     RedditLinkTests assertContractUsing: link.
     self assert: link url equals: url.
     self assert: link title equals: title.
     session delete: link
]]]

You should be able to run all of these tests now, and ensure that they all pass with a green dot.

!! RedditSession

!!! Intermezzo Due: Installing Seaside

To build a web application, Pharo supports a framework called Seaside, at this point you will need to install it so that you can serve web content:

[[[
Metacello new
  configuration:'Seaside3';
  repository: 'http://www.smalltalkhub.com/mc/Seaside/MetacelloConfigurations/main';
  version: #stable;
  load
]]]

We are now almost ready to start writing the GUI of our actual web application. Seaside web applications normally have a session object that keeps the application's state during the user's interaction with it. We need to extend that session with a database session. To do this, we define a new class  ==RedditSession== as a subclass of ==WASession==. In addition, we add an instance variable called ==glorpSession== to hold a Glorp session to the database.

[[[
WASession subclass: #RedditSession
   instanceVariableNames: 'glorpSession'
   classVariableNames: ''
   package: 'Reddit-DB'
]]]

Note below how we are using lazy initialization in the ==glorpSession== accessor.
In ==newGlorpSession== we're then making use of our ==RedditDatabaseResource==. 

[[[
RedditSession >> glorpSession
   glorpSession ifNil: [ glorpSession := self newGlorpSession ].
   glorpSession accessor isLoggedIn
       ifFalse: [ glorpSession accessor login ].
   ^ glorpSession
]]]

[[[
RedditSession >> newGlorpSession
     | session | 
     session := RedditDatabaseResource session.
     "session accessor logging: true."
     ^ session
]]]

The ==unregistered== is a hook called by Seaside whenever a session expires, we use it clean up our Glorp session by doing a log out.

[[[
RedditSession >> unregistered
     super unregistered.
     self teardownGlorpSession
]]]

[[[
RedditSession >> teardownGlorpSession
     self glorpSession logout
]]]

!! Web Part: the Component WAReddit

We can finally start with our web app itself. Figure 1 shows the main page of the Reddit.st app. There are four sections in this page: a header or title section, some action links, a list of some of the highest or top ranking links and a list if some of the latest or most recent links.

+Reddit>file://figures/redditOne.png|width=50|label=redditOne+


We create a ==WAComponent== subclass called ==WAReddit==. This will become our central or root web app component. We start by writing the rendering methods.

[[[
WAComponent subclass: #WAReddit
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'Reddit-Web'
]]]

[[[
WAReddit >> renderContentOn: html
    html heading: 'Reddit.st'.
    html heading level: 3; with: 'In 10 elegant Smalltalk classes'.
    self renderActionsOn: html.
    self renderHighestRankingLinksOn: html.
    self renderLatestLinksOn: html
]]]

[[[
WAReddit >> renderActionsOn: html
    html paragraph: [ html anchor callback: [ ]; with: 'Refresh'.
    html anchor callback: [ self inform: 'Not yet implemented' ]; with: 'New Link' ]
]]]

[[[
WAReddit >> renderHighestRankingLinksOn: html
    html heading level: 2; with: 'Highest Ranking Links'.
    html orderedList: [
          self highestRankingLinks do: [ :each | self renderLink: each on: html ] ]
]]]

[[[
WAReddit >> renderLatestLinksOn: html
    html heading level: 2; with: 'Latest Links'.
    html orderedList: [
         self latestLinks do: [ :each | self renderLink: each on: html ] ]
]]]

[[[
WAReddit >> renderLink: link on: html
    html listItem: [ html anchor url: link url; title: link url; with: link title.
    html text: ' Posted ', (self durationString: link age), ' ago. '.
    html text: link points asString, ' points. '.
    html anchor
         callback: [ self voteUp: link ];
         title: 'Vote this link up';
         with: 'Up'.
    html space.
    html anchor
         callback: [ self voteDown: link ];
         title: 'Vote this link down'; with: 'Down' ]
]]]

Starting with the main ==renderContentOn:== method, the rendering of each section is delegated to its own method. Note how ==renderLink:on:== is used 2 times. 

!!!! Rendering Link

For now, we're not yet implementing the 'New Link' action. Our rendering methods depend on 5 extra methods: ==highestRankingLinks==, ==latestLinks==, the class method ==durationString:== and the actions methods ==voteUp:== and ==voteDown:==. Only the first three are needed to render the page itself.

[[[
WAReddit >> highestRankingLinks
   | query | 
   query := (Query read: RedditLink)
              orderBy: [ :each | each points descending ]; 
              limit: 20; yourself.
   ^ self session glorpSession execute: query
]]]

[[[
WAReddit >> latestLinks
   | query | 
   query := (Query read: RedditLink)
              orderBy: [ :each | each created descending];
              limit: 20; yourself.
   ^ self session glorpSession execute: query
]]]

[[[
WAReddit >> durationString: duration
   ^ String streamContents: [ :stream |
         | needSpace printer |
         needSpace := false.
         printer := [ :value :word |
                       value isZero ifFalse: [
                            needSpace ifTrue: [ stream space ].
                            stream nextPutAll: (value pluralize: word).
                            needSpace := true ] ].
        printer value: duration days value: 'day'.
        printer value: duration hours value: 'hour'.
        printer value: duration minutes value: 'minute' ]
]]]

In ==highestRankingLinks== and ==latestLinks==, we explicitly build up and execute Query objects with some more advanced options. For duration string conversion we use the powerful ==pluralize== method. With these pieces in place we can already render the page, however since we haven't yet added any CSS styling, the result looks rather dull.


[[[
WAReddit >> voteDown: link
    self session glorpSession
       inUnitOfWorkDo: [ :session | session register: link.
                            link voteDown ]
]]]


[[[
WAReddit >> voteUp: link
   self session glorpSession 
      inUnitOfWorkDo: [ :session | 
           session register: link.
           link voteUp ]
]]]

Voting links up or down is trivial, like with our database test, we only have to make sure that we do the object modifications inside a Glorp unit of work and the actual SQL update will be done automatically.



!! RedditFileLibrary

To style our web app, we'll be reusing the CSS file from Reddit.lisp. This CSS code references one small GIF for its background gradient. We need to make sure our application makes use of the CSS file and that we also serve the actual files. Seaside can serve these files in a couple of ways, however we'll be using the ==FileLibrary== approach. This is a class where each resource served is implemented as a method.


To enable this we define a new subclass of WAFileLibrary, named ==RedditFileLibrary== that will have 2 methods: ==mainCss== and ==bgGif==, returning a string and bytes respectively. These are long methods which are not our main focus so we do not list them here. Based on some naming conventions, Seaside will figure out what mime types to use.

[[[
RedditFileLibrary >> updateRoot: anHtmlRoot
    super updateRoot: anHtmlRoot. 
    anHtmlRoot title: 'Reddit.st'. 
    anHtmlRoot stylesheet url: (RedditFileLibrary urlOf: #mainCss)
]]]

By implementing the ==updateRoot:== hook method on ==WAReddit==, we can set our page title and CSS. Note again how everything happens in Smalltalk. To install a Seaside application, a ""class"" side ==initialize== method is typically used.

[[[
WAReddit class >> initialize
   (WAAdmin register: self asApplicationAt: 'reddit') 
        preferenceAt: #sessionClass put: RedditSession; 
        addLibrary: RedditFileLibrary
]]]


Finally we register our main component as an application under the handler 'reddit' so its URL will become something like ==http://localhost:8080/reddit==. Then we tell it to use our custom session class and finally add our file library. We now have a nicely styled, working web app.

@@note As at May/2017, the latest stable version of Seaside in Pharo 6 doesn't yet support the Seaside Control panel, so you may have to start a server from the playgroud by evaluating [[[ZnZincServerAdaptor startOn: 8080.]]] and then navigating to localhost:8080 in your browsers.

!! WARedditLinkEditor

One of Seaside's main advantages over other web application frameworks is its support for components. Especially for large and complex projects this makes a huge difference. We'll be introducing a new component to allow the user to enter the necessary information when adding a new link. Consider the difference between Figure 1 and Figure 2: when the user clicks the =='New Link'== anchor, we'll add an editor just below (while hiding the =='New Link'== anchor). The editor will have its own 'Save' and 'Cancel' buttons. Both of these will dismiss the editor, saving or cancelling the new link.


redditNewLink
+Reddit>file://figures/redditNewLink.png|width=50|label=redditNew+


How is Seaside's component model powerful? As we will see next, the component is written without any knowledge of where it will be used. Its validation logic is independent. It is used just by embedding it and by wiring it to its user in a simple way. The subcomponent functions independently from its embedding parent while each keeps its own state: whether the component is visible or not, you can keep on voting links up or down, and doing so will not alter the contents of the component.


To prove our point, we'll be using yet another component inside our link editor: a simple CAPTCHA component. This will be implemented in the final section, but used here as a black box.

The first step is to make the necessary additions and modifications to ==WAReddit== to accommodate the link editor component. We add an instance variable called ==linkEditor== with its accessors.

[[[
WAReddit >> renderContentOn: html
     html heading: 'Reddit.st'. 
     html heading level: 3; with: 'In 10 elegant Smalltalk classes'. 
     self renderActionsOn: html. 
     self linkEditor notNil
        ifTrue: [ html render: self linkEditor ].
     self renderHighestRankingLinksOn: html. 
     self renderLatestLinksOn: html
]]]


[[[
WAReddit >> renderActionsOn: html
     html paragraph: [ 
     	html anchor callback: [ ]; with: 'Refresh'. 
     	self linkEditor isNil ifTrue: [
     	html anchor callback: [ self showNewLinkEditor ]; with: 'New Link' ] ]
]]]


[[[
WAReddit >> showNewLinkEditor
     self linkEditor: WARedditLinkEditor new. 
     self linkEditor onAnswer: [ :answer |
          answer ifTrue: [ 
               self session glorpSession inUnitOfWorkDo: [ :session |
                    session register: self linkEditor createLink ] ]. 
          self linkEditor: nil ]
]]]

When saving this method in Pharo, you will be offered the option to automatically create the ==WARedditLinkEditor==, you can do this and make it a subclass of ==WAComponent==.

[[[
WAReddit >> children
    ^ self linkEditor notNil 
        ifTrue: [ Array with: self linkEditor ] 
        ifFalse: [ super children ]
]]]

There are 2 possible states: either we have a link editor subcomponent or not. So the main ==renderContentOn:== method conditionally asks the link editor to render itself. Likewise, in ==renderActionsOn:== the 'New Link' anchor is only rendered when there is no link editor yet.

In the ==showNewLinkEditor== action method we instantiate our subcomponent and hook it up. We could have just reused one instance, however creating a new one is easier and clearer. The wiring is done by supplying a block to ==onAnswer:==. A component can answer a value, in our case true or false for save or cancel respectively. So when the link editor answers true, we save a new link object and hide the editor.

In Seaside, the ==children== method is a hook method that has to be implemented to list all subcomponents. Again this happens conditionally.

We can now implement the component itself: ==WARedditLinkEditor== is a subclass of ==WAComponent== and needs 3 instances variables with their accessors: ==url==, ==title== and ==captcha==.



[[[
WARedditLinkEditor >> renderContentOn: html
	html form: [
		html paragraph: 'Please enter a URL and title for the link that you want to add:'. 
		html textInput size: 48; title: 'The URL of the new link'; on: #url of: self. 
		html textInput size: 48; title: 'The title of the new link'; on: #title of: self. 
		html render: self captcha.
		html submitButton on: #cancel of: self. 
		html submitButton on: #save of: self ]
]]]


[[[
WARedditLinkEditor >> initialize
	super initialize. 
	self url: 'http://'; 
		title: 'title'; 
		captcha: WARedditCaptcha new
]]]

Again when prompted, you can allow Pharo to create the missing class as a subclass of ==WAComponent==

[[[
WARedditLinkEditor >> children
	^ Array with: self captcha
]]]

[[[
WARedditLinkEditor >> updateRoot: anHtmlRoot
	super updateRoot: anHtmlRoot. 
	anHtmlRoot title: 'Reddit.st - Submit a new link'. 
	anHtmlRoot stylesheet url: (RedditFileLibrary urlOf: #mainCss)
]]]


[[[
WARedditLinkEditor >> cancel
	self answer: false
]]]

[[[
WARedditLinkEditor >> save
	self isUrlMissing ifTrue: [ ^ self inform: 'Please enter an URL' ]. 
	self isTitleMissing ifTrue: [ ^ self inform: 'Please enter a title' ]. 
	self captcha isSolved ifFalse: [ ^ self inform: 'Please answer the correct sum using digits' ]. 
	self isUrlValid ifFalse: [ ^ self inform: 'The URL you entered did not resolve' ]. 
	self answer: true
]]]



[[[
WARedditLinkEditor >> isTitleMissing
	^ self title isNil or: [ self title isEmpty or: [ self title = 'title' ] ]
]]]

[[[
WARedditLinkEditor >> isUrlMissing
	^ self url isNil or: [ self url isEmpty or: [ self url = 'http://' ] ]
]]]

[[[
WARedditLinkEditor >> isUrlValid
    ^ [ZnClient new get: self url; isSuccess] on: Error do: [ false ].
]]]

[[[
WARedditLinkEditor >> createLink
	^ RedditLink withUrl: self url title: self title
]]]

Most of the code should be familiar by now. What is new is how ==cancel== and ==save== use ==answer:== to return to whoever called this component. Before ==save== returns successfully, a number of validation tests are done. When one of these tests fails, a message is shown and the operation is aborted. The ==isUrlValid== method actually tries to resolve the URL. Finally, ==createLink== instantiates a new ==RedditLink== instance based on the valid fields entered by the user. Note how the CAPTCHA is used as a true component.

!! WARedditCaptcha: A last Web Component

The last and simplest web component is a CAPTCHA that presents a simple addition in words. This component does not need answer logic. The class ==WARedditCaptcha== is again a subclass of ==WAComponent== with the following instance variables and accessors: ==x==, ==y==, and ==sum==.


[[[
WARedditCaptcha >> renderContentOn: html
	self x: 10 atRandom. 
	self y: 10 atRandom. 
	html paragraph: 'CAPTCHA: How much is ', 
		self x asWords, ' plus ', self y asWords, ' ?'. 
	html textInput 
		title: 'This functions as a CAPTCHA, type the answer using digits'; 
		on: #sum of: self
]]]

[[[
WARedditCaptcha >> initialize
	super initialize. 
	self x: 0; y: 0; sum: 0
]]]

[[[
WARedditCaptcha >> isSolved
	^ self sum asInteger = (self x + self y)
]]]

Each time the CAPTCHA is rendered, ==x== and ==y== get a new random value between 1 and 10. Next, the addition is presented in words. The ==isSolved== method checks if the user answered correctly.

!! Conclusion

The source code discussed in this chapter is available in the  by typing 'Reddit'.

Measuring the quality of the design is often a challenge, however we believe that having classes with clear responsibilities is an essential driver for great code. This is what we have applied when designing this little application. Reddit.st consists of 10 classes with a total of 8 class methods and 75 instance methods. More than half are just one (1) line long, and the rest average just a few lines.

!!! Appendix
The source code discussed in this article is available in the Pharo Catalog Browser or from the *SmalltalkHub>http://smalltalkhub.com/#!/~SvenVanCaekenberghe/Reddit* in a project called Reddit. It was written for Pharo 3.0. You should load the code using its Metacello configuration, because Seaside and Glorp are prerequisites that also have to be loaded. Note: these are both heavy packages that can take a while to load and compile.

[[[
Gofer it
  smalltalkhubUser: 'SvenVanCaekenberghe' project: 'Reddit';
  configuration;
  loadStable.
]]]

You will have to configure the connection to your PostgreSQL instance. One way to do so is to edit the method ==RedditDatabaseResource class>> createLogin==. After you have done this, make sure to clear the cached version by doing ==RedditDatabaseResource resetLogin==.

Alternatively, you can download a prebuilt image containing everything as the latest successful build artifact from the Pharo Contribution CI job called Reddit, at *https://ci.inria.fr/pharo-contribution/job/Reddit/*
